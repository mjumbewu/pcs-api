All files in this project are Copyright (C) 2010 Mjumbe Poe

This is an attempt at an API over HTTP for the PhillyCarShare reservation 
system.  It is built to run on Google App Engine, though there is very little
App Engine-specific code.  It should be easily adaptable to a Django install,
or some other Python web framework.

There is no warranty on this software.  Use at your own risk.

NOTE: THIS API IS NOT YET SANCTIONED BY PHILLYCARSHARE. AS SUCH, IT IS STRICTLY
      FOR PERSONAL INTEREST ONLY, AT THIS POINT. THIS SITUATION MAY CHANGE SOON
      (next week) BUT FOR NOW, YOU HAVE BEEN WARNED.


STRUCTURE
~~~~~~~~~
The pcs package is where most of the work happens. It is arranged into four
sub-directories:

 * data: The general data model for the API.  These are simple classes that 
   don'treally do anything aside from hold data.
   
 * wsgi_handlers: This contains modules for input handlers. The only input
   handlers being implemented right now (and probably ever to be implemented)
   are WSGI handlers.
   
 * fetchers: This contains modules for constructing various objects in the data
   model from the information at some source. For example, these modules may
   communicate with the reservation system on PCS's servers. The only sources
   implemented now are screenscraped, as PCS doesn't have a public API that I
   know of (hence this project).
   
 * renderers: This contains modules for representing the API data model. One
   view is JSON data, but there are definitely other possibilities (e.g., XML).


TESTING
~~~~~~~
Most of the code is well tested, and the tests are an important part of the 
package, especially since the only source for now is screenscraping.  The tests
reside in the 'test' directory.  To run the tests, start the appengine
server, and browse to http://localhost:8080/test.  Make sure to sign in as 
administrator.  

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


API OVERVIEW
~~~~~~~~~~~~

/login.[format]
GET
    Get a form or some other mechanism for the user to be able to submit their
    username and password

/session.[format]
POST
    Create a new session from the given user credentials.  Note: this should be
    done through a secure connection, since credentials are submitted.
    
  - Params:
    user
    password
    
  - Response:
    Response will contain a session identifier in a cookie. This cookie should
    be sent with any subsequent calls to the API.

/locations/[id]/availability.[format]
GET
    Check for available vehicles near the given location.
  
  - Params:
    start_time (ISO8601 string - defaults to now rounded to next 15 minutes)
    end_time (ISO8601 string - defaults to 3 hours later than start_time)
    flexible (True/False - defaults to True)
    show_all (True/False - defaults to True)
  
  - Note:
    The [id] variable may be a saved location profile id, a set of GPS
    coordinates in a tuple (e.g., '([long],[lat])'), or '.default' to use the
    user's default location profile.

/vehicles/[id]/availability.[format]
GET
    Check the availability (and price) of a given vehicle during a certain time
  
  - Params:
    start_time (ISO8601 string)
    end_time (ISO8601 string)

/reservations.[format]
GET
POST

/reservations/[id].[format]
GET
PUT

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


ADDITIONAL NOTES
~~~~~~~~~~~~~~~~

Background
----------

I'm using this project to overcome the following situations:
- PhillyCarShare does not appear to have a public API for their reservation
  system.
- The full website is a beast to browse on any mobile device.  It's bearable on
  and iPhone, but far from ideal.
- There are little features that would be nice to have that are not available 
  through the main PCS site, that I'd like the option of building.


Testing Guidelines
------------------

Here are my testing guidelines:
- Tests are important.  That's pretty much always true, but especially so for
  this project.  I currently have no API as even a loose contract with PCS, and
  at any time they could choose to change anything about their web interface.
  Since I am dependent on screenscraping said interface, I need to know ASAP 
  when something breaks.  Automated tests are thus a large part of my disaster-
  prevention strategy.  They also make refactoring really easy, which is nice,
  because I'm really indecisive with my design decisions.
  
  I created a few decorators to automatically check the method names and 
  parameter order on my stubs and patches.  The class decorator @Stub allows
  you to specify a class to create a stub of.  If you then attempt to create
  a member method of the stub that does not match the signature of some method
  of the original class, an error will be raised.  The function decorator 
  @patch allows you to override a method on a class (or a Stub class), and 
  automatically verifies that the signature of the patch matches a method on 
  the actual class.
  
- I will not put my PCS userid/password anywhere in this project, and no one
  else should either.  This type of thing should go in the private_info file in 
  the test directory.  Copy private_info.py.template to private_info.py, and 
  enter your credentials there.  Changes to this file will not be checked in.


Reservation Identifiers
-----------------------

In the PCS system, every reservation made has a unique identifier. However, the
ID that the user sees is the confirmation ID, not the reservation ID (this is
still called the reservation ID on things like the reservations list and the gas
remibursement request form though). There is a way to get information on a
reservation with the reservation ID, but it doesn't seem that there is any way
using the confirmation ID, aside from browsing through all of the reservations
listings.

The best way to get information on a single reservation is with the reservation
ID. This is only available (to my knowledge) for current and upcoming
reservations. If there is a guarantee that confirmation IDs are monotonic with
respect to the reservation date, then I can do a binary search through the
reservation lists for a specific reservation.  However, I do not yet have a way
to recover the actual reservation ID for a past reservation given just the 
confirmation ID.
